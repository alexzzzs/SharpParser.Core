name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['8.0.x', '9.0.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build (Debug)
      run: dotnet build --configuration Debug --no-restore

    - name: Build (Release)
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Debug --no-restore --verbosity normal --logger "trx;LogFileName=test-results.trx"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.dotnet-version }}
        path: "**/*.trx"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests with coverage
      run: dotnet test --configuration Debug --no-restore --collect:"XPlat Code Coverage" --results-directory ./coverage --settings ./codecov.runsettings

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage/**

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Check formatting (if dotnet-format available)
      run: |
        if dotnet tool list -g | grep -q dotnet-format; then
          echo "Running dotnet format check..."
          dotnet format --verify-no-changes --verbosity diagnostic
        else
          echo "dotnet-format not available, skipping format check"
        fi
      continue-on-error: true

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build benchmarks
      run: dotnet build benchmarks/SharpParser.Core.Benchmarks.fsproj --configuration Release

    - name: Run benchmarks
      run: dotnet run --project benchmarks/SharpParser.Core.Benchmarks.fsproj --configuration Release -- --exporters json --exporters html

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          BenchmarkDotNet.Artifacts/**

  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'release') || contains(github.event.head_commit.message, 'Release')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'

    - name: Validate version consistency
      run: |
        # Check version in fsproj
        PROJECT_VERSION=$(grep -oP '<Version>\K[^<]+' src/SharpParser.Core/SharpParser.Core.fsproj)
        echo "Project version: $PROJECT_VERSION"

        # Check version in changelog
        if grep -q "## \[$PROJECT_VERSION\]" CHANGELOG.md; then
          echo "✅ Version found in changelog"
        else
          echo "❌ Version not found in changelog"
          exit 1
        fi

        # Check version in README badges
        if grep -q "SharpParser.Core/$PROJECT_VERSION" README.md; then
          echo "✅ Version found in README badges"
        else
          echo "❌ Version not found in README badges"
          exit 1
        fi

    - name: Final release build
      run: dotnet build --configuration Release

    - name: Run all tests
      run: dotnet test --configuration Release

    - name: Create release package
      run: dotnet pack src/SharpParser.Core/SharpParser.Core.fsproj --configuration Release --output ./release-artifacts

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: release-artifacts/**